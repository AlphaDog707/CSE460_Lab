// Copyright (C) 1991-2008 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II"
// VERSION "Version 8.1 Build 163 10/28/2008 SJ Web Edition"

// DATE "03/22/2021 15:32:16"

// 
// Device: Altera EPF10K30ETC144-1 Package TQFP144
// 

// 
// This Verilog file should be used for Custom Verilog HDL only
// 

`timescale 1 ps/ 1 ps

module problem3_18101707 (
	i,
	z,
	selector);
input 	[8:0] i;
output 	z;
input 	[2:0] selector;

wire gnd = 1'b0;
wire vcc = 1'b1;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
// synopsys translate_off
initial $sdf_annotate("problem3_18101707_v.sdo");
// synopsys translate_on

wire \z~20_combout ;
wire \z~21_combout ;
wire \z~22_combout ;
wire \z~23_combout ;
wire \z~24_combout ;
wire [8:0] \i~dataout ;
wire [2:0] \selector~dataout ;


// atom is at PIN_54
flex10ke_io \i[5]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\i~dataout [5]),
	.padio(i[5]));
// synopsys translate_off
defparam \i[5]~I .feedback_mode = "from_pin";
defparam \i[5]~I .operation_mode = "input";
defparam \i[5]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_17
flex10ke_io \i[2]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\i~dataout [2]),
	.padio(i[2]));
// synopsys translate_off
defparam \i[2]~I .feedback_mode = "from_pin";
defparam \i[2]~I .operation_mode = "input";
defparam \i[2]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_126
flex10ke_io \selector[2]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\selector~dataout [2]),
	.padio(selector[2]));
// synopsys translate_off
defparam \selector[2]~I .feedback_mode = "from_pin";
defparam \selector[2]~I .operation_mode = "input";
defparam \selector[2]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_56
flex10ke_io \i[3]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\i~dataout [3]),
	.padio(i[3]));
// synopsys translate_off
defparam \i[3]~I .feedback_mode = "from_pin";
defparam \i[3]~I .operation_mode = "input";
defparam \i[3]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_124
flex10ke_io \selector[1]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\selector~dataout [1]),
	.padio(selector[1]));
// synopsys translate_off
defparam \selector[1]~I .feedback_mode = "from_pin";
defparam \selector[1]~I .operation_mode = "input";
defparam \selector[1]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_125
flex10ke_io \i[1]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\i~dataout [1]),
	.padio(i[1]));
// synopsys translate_off
defparam \i[1]~I .feedback_mode = "from_pin";
defparam \i[1]~I .operation_mode = "input";
defparam \i[1]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at LC2_C33
flex10ke_lcell \z~20 (
// Equation(s):
// \z~20_combout  = \selector~dataout [2] & (\selector~dataout [1]) # !\selector~dataout [2] & (\selector~dataout [1] & \i~dataout [3] # !\selector~dataout [1] & (\i~dataout [1]))

	.dataa(\selector~dataout [2]),
	.datab(\i~dataout [3]),
	.datac(\selector~dataout [1]),
	.datad(\i~dataout [1]),
	.aclr(gnd),
	.aload(gnd),
	.clk(gnd),
	.cin(gnd),
	.cascin(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.combout(\z~20_combout ),
	.regout(),
	.cout(),
	.cascout());
// synopsys translate_off
defparam \z~20 .clock_enable_mode = "false";
defparam \z~20 .lut_mask = "e5e0";
defparam \z~20 .operation_mode = "normal";
defparam \z~20 .output_mode = "comb_only";
defparam \z~20 .packed_mode = "false";
// synopsys translate_on

// atom is at PIN_55
flex10ke_io \i[7]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\i~dataout [7]),
	.padio(i[7]));
// synopsys translate_off
defparam \i[7]~I .feedback_mode = "from_pin";
defparam \i[7]~I .operation_mode = "input";
defparam \i[7]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at LC3_C33
flex10ke_lcell \z~21 (
// Equation(s):
// \z~21_combout  = \selector~dataout [2] & (\z~20_combout  & (\i~dataout [7]) # !\z~20_combout  & \i~dataout [5]) # !\selector~dataout [2] & (\z~20_combout )

	.dataa(\i~dataout [5]),
	.datab(\selector~dataout [2]),
	.datac(\z~20_combout ),
	.datad(\i~dataout [7]),
	.aclr(gnd),
	.aload(gnd),
	.clk(gnd),
	.cin(gnd),
	.cascin(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.combout(\z~21_combout ),
	.regout(),
	.cout(),
	.cascout());
// synopsys translate_off
defparam \z~21 .clock_enable_mode = "false";
defparam \z~21 .lut_mask = "f838";
defparam \z~21 .operation_mode = "normal";
defparam \z~21 .output_mode = "comb_only";
defparam \z~21 .packed_mode = "false";
// synopsys translate_on

// atom is at PIN_12
flex10ke_io \i[4]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\i~dataout [4]),
	.padio(i[4]));
// synopsys translate_off
defparam \i[4]~I .feedback_mode = "from_pin";
defparam \i[4]~I .operation_mode = "input";
defparam \i[4]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_96
flex10ke_io \i[0]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\i~dataout [0]),
	.padio(i[0]));
// synopsys translate_off
defparam \i[0]~I .feedback_mode = "from_pin";
defparam \i[0]~I .operation_mode = "input";
defparam \i[0]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at LC4_C33
flex10ke_lcell \z~22 (
// Equation(s):
// \z~22_combout  = \selector~dataout [1] & (\selector~dataout [2]) # !\selector~dataout [1] & (\selector~dataout [2] & \i~dataout [4] # !\selector~dataout [2] & (\i~dataout [0]))

	.dataa(\selector~dataout [1]),
	.datab(\i~dataout [4]),
	.datac(\selector~dataout [2]),
	.datad(\i~dataout [0]),
	.aclr(gnd),
	.aload(gnd),
	.clk(gnd),
	.cin(gnd),
	.cascin(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.combout(\z~22_combout ),
	.regout(),
	.cout(),
	.cascout());
// synopsys translate_off
defparam \z~22 .clock_enable_mode = "false";
defparam \z~22 .lut_mask = "e5e0";
defparam \z~22 .operation_mode = "normal";
defparam \z~22 .output_mode = "comb_only";
defparam \z~22 .packed_mode = "false";
// synopsys translate_on

// atom is at PIN_97
flex10ke_io \i[6]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\i~dataout [6]),
	.padio(i[6]));
// synopsys translate_off
defparam \i[6]~I .feedback_mode = "from_pin";
defparam \i[6]~I .operation_mode = "input";
defparam \i[6]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at LC5_C33
flex10ke_lcell \z~23 (
// Equation(s):
// \z~23_combout  = \selector~dataout [1] & (\z~22_combout  & (\i~dataout [6]) # !\z~22_combout  & \i~dataout [2]) # !\selector~dataout [1] & (\z~22_combout )

	.dataa(\i~dataout [2]),
	.datab(\selector~dataout [1]),
	.datac(\z~22_combout ),
	.datad(\i~dataout [6]),
	.aclr(gnd),
	.aload(gnd),
	.clk(gnd),
	.cin(gnd),
	.cascin(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.combout(\z~23_combout ),
	.regout(),
	.cout(),
	.cascout());
// synopsys translate_off
defparam \z~23 .clock_enable_mode = "false";
defparam \z~23 .lut_mask = "f838";
defparam \z~23 .operation_mode = "normal";
defparam \z~23 .output_mode = "comb_only";
defparam \z~23 .packed_mode = "false";
// synopsys translate_on

// atom is at PIN_14
flex10ke_io \selector[0]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\selector~dataout [0]),
	.padio(selector[0]));
// synopsys translate_off
defparam \selector[0]~I .feedback_mode = "from_pin";
defparam \selector[0]~I .operation_mode = "input";
defparam \selector[0]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at LC1_C33
flex10ke_lcell \z~24 (
// Equation(s):
// \z~24_combout  = \selector~dataout [0] & \z~21_combout  # !\selector~dataout [0] & (\z~23_combout )

	.dataa(vcc),
	.datab(\z~21_combout ),
	.datac(\z~23_combout ),
	.datad(\selector~dataout [0]),
	.aclr(gnd),
	.aload(gnd),
	.clk(gnd),
	.cin(gnd),
	.cascin(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.combout(\z~24_combout ),
	.regout(),
	.cout(),
	.cascout());
// synopsys translate_off
defparam \z~24 .clock_enable_mode = "false";
defparam \z~24 .lut_mask = "ccf0";
defparam \z~24 .operation_mode = "normal";
defparam \z~24 .output_mode = "comb_only";
defparam \z~24 .packed_mode = "false";
// synopsys translate_on

// atom is at PIN_64
flex10ke_io \i[8]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(),
	.padio(i[8]));
// synopsys translate_off
defparam \i[8]~I .feedback_mode = "from_pin";
defparam \i[8]~I .operation_mode = "input";
defparam \i[8]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_11
flex10ke_io \z~I (
	.datain(\z~24_combout ),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(),
	.padio(z));
// synopsys translate_off
defparam \z~I .feedback_mode = "none";
defparam \z~I .operation_mode = "output";
defparam \z~I .reg_source_mode = "none";
// synopsys translate_on

endmodule
